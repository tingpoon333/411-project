Our team used Python programming for our project because it is the programming language we are familiar with the most and are most comfortable using. Our
team has extensive experience with Python due to previous projects and coursework, allowing us to easily navigate the language's syntax and libraries.
We had decided against all other programming languages (Java, C, etc.) since we had less experience in them as a collective in comparrison to Python. Given
our team's proficiency in Python programming, we opted to utilize the Flask web framework to support our project development since it's a flexible
framework that provides a set of abstractions and Python libraries that allow developers to easily create web applications. Though two of the three group
members (Diego Murcia and Chui Poon) were unfamiliar with Flask upon the start of the semester, they were able to successfully learn and adapt to the
framework while making contributions to the programming overall. Meanwhile, Dohyun Kim assisted in the learning and implementation process of the Flash
framework, as proofread any programming involving Flask methods and packages. In addition to our proficiency in Python programming, our team also possessed
some knowledge and proficiency in MySQL. As a result, we leveraged this familiarity by utilizing MySQL for our project development. Because Dohuyn Kim is
most proficient in MySQL in comparison to the to rest of the group, he spent most of his efforts a working database via MySQL programming. Chui Poon
connected both the frontend and backend programming via her contributions in HTML and CSS programming. Diego Murcia operated on the backend programming,
creating lines of code that satisfy certain required operations, and programmed in Flask with the assistance of Dohuym Kim to connect the programming with our 
database. 

When it came to searching for an API oriented around game content, we decided on using RawG video game database. The RawG game database contains over 
900,000 games, all of which contain information regarding genre, release date, critic score, etc. Since our game search would be more oriented around genre,
our team decided that RawG would be an ideal database to use. For our second API, we decided that we wanted to use the spotify API. Our intentions for 
using the Spotify API was to create a relaxing ambience to the site, resembling something of a "gamer-like" mood.
